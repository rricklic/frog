shader_type canvas_item;

// TODO: fix and test

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;
uniform float bloom_radius = 1.0;
uniform float bloom_threshold = 1.0;
uniform float bloom_intensity = 1.0;

vec3 calculate_bloom_pixel(sampler2D tex, vec2 uv, vec2 texPixelSize)
{
	vec2 uv2 = floor(uv / texPixelSize) * texPixelSize;
	uv2 += texPixelSize * .001;
	vec3 tl = max(texture(tex, uv2).rgb - bloom_threshold, 0.0);
	vec3 tr = max(texture(tex, uv2 + vec2(texPixelSize.x, 0.0)).rgb - bloom_threshold, 0.0);
	vec3 bl = max(texture(tex, uv2 + vec2(0.0, texPixelSize.y)).rgb - bloom_threshold, 0.0);
	vec3 br = max(texture(tex, uv2 + vec2(texPixelSize.x, texPixelSize.y)).rgb - bloom_threshold, 0.0);
	vec2 f = fract( uv / texPixelSize );

	vec3 tA = mix( tl, tr, f.x );
	vec3 tB = mix( bl, br, f.x );

	return mix( tA, tB, f.y );
}

vec3 calculate_bloom(sampler2D tex, vec2 uv, vec2 texPixelSize)
{
	vec3 bloom = vec3(0.0);
	vec2 off = vec2(1) * texPixelSize * bloom_radius;
	bloom += calculate_bloom_pixel(tex, uv + off * vec2(-1, -1), texPixelSize * bloom_radius) * 0.292893;
	bloom += calculate_bloom_pixel(tex, uv + off * vec2(-1, 0), texPixelSize * bloom_radius) * 0.5;
	bloom += calculate_bloom_pixel(tex, uv + off * vec2(-1, 1), texPixelSize * bloom_radius) * 0.292893;
	bloom += calculate_bloom_pixel(tex, uv + off * vec2(0, -1), texPixelSize * bloom_radius) * 0.5;
	bloom += calculate_bloom_pixel(tex, uv + off * vec2(0, 0), texPixelSize * bloom_radius) * 1.0;
	bloom += calculate_bloom_pixel(tex, uv + off * vec2(0, 1), texPixelSize * bloom_radius) * 0.5;
	bloom += calculate_bloom_pixel(tex, uv + off * vec2(1, -1), texPixelSize * bloom_radius) * 0.292893;
	bloom += calculate_bloom_pixel(tex, uv + off * vec2(1, 0), texPixelSize * bloom_radius) * 0.5;
	bloom += calculate_bloom_pixel(tex, uv + off * vec2(1, 1), texPixelSize * bloom_radius) * 0.292893;
	bloom /= 4.171573f;
	return bloom;
}

void fragment()
{
	vec4 col = texture(SCREEN_TEXTURE, SCREEN_UV);
	vec3 bloom = calculate_bloom(SCREEN_TEXTURE, SCREEN_UV, SCREEN_PIXEL_SIZE);
	col.rgb += bloom * bloom_intensity;
	COLOR = col;
}